
***********************para finalizar um processo digitar q****************

1.0) INTRODUÇÃO AO GIT

1.1 - Diferença entre versões.
 Quando temos dois arquivos e queremos verificar quais são suas diferenças, podemos utilizar um comando no terminal chamado DIIF, ele verifica quais são as diferenças entre dois projetos e te mostra no terminal.

 - diff -u game_old.js game_new.js (-u é uma forma de facilitar a visualização)


******************************************************************************
--- game_old.js	2017-12-31 13:37:10.106401737 -0200
+++ game_new.js	2017-12-31 13:37:00.866270974 -0200
@@ -4,9 +4,9 @@
 //
 
 KEY_CODES = {
+  13: 'enter',
   32: 'space',
   37: 'left',
-  38: 'up',
   39: 'right',
   40: 'down',
   70: 'f',
*******************************************************************************

 Onde temos - é o que foi retirado e + incluido, onde não há nada não houve alteração.

 O git tbm tem um comando bem similar para comparação de commits que é:

 ***git diff (commit anterior commit posterior)

 Bom mas isso é quando temos commits para comparar, porém muitas vezes queremos comparar os arquivos do nosso work space com a commit que alteramos. Para isso basta usar o comando;

***git diff (sem nem uma ID)

***git diff --staged

quando usamos esse último comando, verificamos a diferença entre um arquivo na área secundária e o mesmo arquivo no repositório, isso é muito util na hora de verificar se add o arquivo correto para a commit


1.2 - COMMITS
 O git nos permite gravar modificações manualmente, salvamos nosso arquivo git como uma nova versão, quanto temos uma modificação lógica. O git nos exige que em cada modificação realizamos uma commit que nada mais é do que uma descrição detalhada da modificação realizada.
Por exemplo, alteração de cor da nave (A commit tem que ser simples porém clara com o que foi alterado).

 Para verificar todos as commits, utilizamos o comando log.
 
 ****git log na pasta do repositório



1.3 - CLONANDO UM REPOSITÓRIO.

 Para baixar o repositório com git é simples, apenas usamos o comando:

 ****git clone URL(do repositório)

1.4 - Acessando outras commits

 Quando por exemplo, detectamos um bug após uma alteração e é necessário acessar uma commit do passado facilitar na detecção de bugs. Para isso usamos o comando git checkout.

***git checkout (Id da commit a ser retornada)

 Quando retornamos para uma commiti antiga, ao usar o git log, vemos que esa é dada como a última commit e não temos visão das restantes.


1.4 DELETANDO MODIFICAÇÕES QUE NÃO QUEREMOS NO WORKING SPACE OU AREA SECUNDÁRIA.

 Quando temos uma modificação desejada em algum dos arquivos, tanto na área de trabalho quanto na área secuntádia, usamos o seguinte comando para apagar as modificações.

*** git resert --hard

Temos que tomar muito cuidado com esse comando, por tanto é importante termos certeza que apenas os arquivos que queremos apagar esteja no working space ou no área secundária. Para isso usamos o git diff (compara working space com repositório) ou git diff -staged (compara área seccundária com 

